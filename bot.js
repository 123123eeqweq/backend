require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const token = process.env.TELEGRAM_BOT_TOKEN;
const adminIds = process.env.ADMIN_IDS.split(',').map(id => id.trim());
const apiUrl = process.env.API_URL;

// –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, '–ô–æ, –±—Ä–æ! üëä –Ø –±–æ—Ç –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π /add <user_id> <amount> –∏–ª–∏ /remove <user_id> <amount> [stars|diamonds]. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add
bot.onText(/\/add (\d+) (\d+)(?: (stars|diamonds))?/, async (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω
  if (!adminIds.includes(userId)) {
    return bot.sendMessage(chatId, '–ù–∞—Ö—É–π –∏–¥–∏ –æ—Ç—Å—é–¥–∞ üö´');
  }

  const telegramId = match[1];
  const amount = parseInt(match[2]);
  const type = match[3] || 'stars';

  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  if (amount <= 0) {
    return bot.sendMessage(chatId, '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è! üòí');
  }

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥
    const response = await axios.post(apiUrl, {
      telegramId,
      amount,
      type
    });

    bot.sendMessage(chatId, `Goy has been credited! –ù–∞—á–∏—Å–ª–µ–Ω–æ ${amount} ${type} —é–∑–µ—Ä—É ${telegramId}! üí´`);
  } catch (error) {
    if (error.response) {
      bot.sendMessage(chatId, `–û–π, –∫–æ—Å—è–∫: ${error.response.data.message} üòï`);
    } else {
      bot.sendMessage(chatId, '–°–µ—Ä–≤–∞–∫ –æ—Ç–≤–∞–ª–∏–ª—Å—è, –ø–Ω–∏ –∞–¥–º–∏–Ω–∞! üòÖ');
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /remove
bot.onText(/\/remove (\d+) (\d+)(?: (stars|diamonds))?/, async (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω
  if (!adminIds.includes(userId)) {
    return bot.sendMessage(chatId, '–ù–∞—Ö—É–π –∏–¥–∏ –æ—Ç—Å—é–¥–∞ üö´');
  }

  const telegramId = match[1];
  const amount = parseInt(match[2]);
  const type = match[3] || 'stars';

  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  if (amount <= 0) {
    return bot.sendMessage(chatId, '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è! üòí');
  }

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥
    const response = await axios.post(`${apiUrl}/remove`, {
      telegramId,
      amount,
      type
    });

    bot.sendMessage(chatId, `–°–Ω—è—Ç–æ ${amount} ${type} —É —é–∑–µ—Ä–∞ ${telegramId}! üóëÔ∏è`);
  } catch (error) {
    if (error.response) {
      bot.sendMessage(chatId, `–û–π, –∫–æ—Å—è–∫: ${error.response.data.message} üòï`);
    } else {
      bot.sendMessage(chatId, '–°–µ—Ä–≤–∞–∫ –æ—Ç–≤–∞–ª–∏–ª—Å—è, –ø–Ω–∏ –∞–¥–º–∏–Ω–∞! üòÖ');
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  console.error('Polling error:', error);
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ');